from flask import Flask, render_template, request, jsonify
import pandas as pd
import os
from recommendation import MusicRecommender
from spotify_recommender import SpotifyMusicRecommender
from weather_recommendation import WeatherMusicRecommender

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your-secret-key-here'

# Initialize recommenders
music_recommender = None
weather_recommender = None
use_spotify_dataset = False

def load_data():
    """Load music dataset and initialize recommenders"""
    global music_recommender, weather_recommender, use_spotify_dataset
    try:
        # Try to load Spotify Million Song Dataset first
        if os.path.exists('data/spotify_million_songs.csv'):
            print("üìä Loading Spotify Million Song Dataset...")
            df = pd.read_csv('data/spotify_million_songs.csv')
            
            # Use Spotify recommender for the large dataset
            music_recommender = SpotifyMusicRecommender(df)
            use_spotify_dataset = True
            print("‚úì Spotify dataset loaded successfully!")
            
            # For weather recommendations, we'll use a sample or create genre mapping
            # Since Spotify dataset doesn't have genre/mood, we'll skip weather recommendations
            # or implement a fallback
            print("‚ÑπÔ∏è  Weather-based recommendations using Spotify dataset (limited features)")
            weather_recommender = None  # Disable for now as Spotify dataset lacks mood/genre
            
            return True
            
        # Fallback to original dataset
        elif os.path.exists('data/music_data.csv'):
            print("üìä Loading original music dataset...")
            df = pd.read_csv('data/music_data.csv')
            music_recommender = MusicRecommender(df)
            weather_recommender = WeatherMusicRecommender(df)
            use_spotify_dataset = False
            print("‚úì Original dataset loaded successfully!")
            return True
            
        else:
            print("‚ö† Warning: No dataset found. Please add dataset.")
            return False
            
    except Exception as e:
        print(f"Error loading data: {e}")
        import traceback
        traceback.print_exc()
        return False

@app.route('/')
def home():
    """Home page route"""
    return render_template('index.html')

@app.route('/lyrics-generator')
def lyrics_generator():
    """Lyrics Generator page route"""
    return render_template('lyrics_generator.html')

@app.route('/song-creator')
def song_creator():
    """Song Creator page route"""
    return render_template('song_creator.html')

@app.route('/song-generator')
def song_generator():
    """Song Generator page route"""
    return render_template('song_generator.html')


@app.route('/recommend', methods=['POST'])
def recommend():
    """Get music recommendations based on selected song"""
    try:
        data = request.get_json()
        song_name = data.get('song_name', '')
        
        if not music_recommender:
            return jsonify({'error': 'System not initialized. Please check dataset.'}), 500
        
        recommendations = music_recommender.get_recommendations(song_name, n_recommendations=10)
        
        if recommendations is None or len(recommendations) == 0:
            return jsonify({'error': 'Song not found or no recommendations available'}), 404
        
        return jsonify({
            'success': True,
            'recommendations': recommendations.to_dict('records')
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/weather-recommend', methods=['POST'])
def weather_recommend():
    """Get music recommendations based on current weather"""
    try:
        data = request.get_json()
        latitude = data.get('latitude')
        longitude = data.get('longitude')
        
        if not weather_recommender:
            return jsonify({'error': 'System not initialized. Please check dataset.'}), 500
        
        result = weather_recommender.get_weather_based_recommendations(
            latitude, longitude, n_recommendations=15
        )
        
        if result is None:
            return jsonify({'error': 'Unable to fetch weather data'}), 500
        
        return jsonify({
            'success': True,
            'weather': result['weather'],
            'mood': result['mood'],
            'recommendations': result['recommendations'].to_dict('records')
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/get-songs', methods=['GET'])
def get_songs():
    """Get list of all available songs"""
    try:
        if not music_recommender or music_recommender.df is None:
            return jsonify({'error': 'System not initialized'}), 500
        
        songs = music_recommender.df['song'].tolist()
        return jsonify({
            'success': True,
            'songs': songs
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/search-songs', methods=['GET'])
def search_songs():
    """Search songs by query"""
    try:
        query = request.args.get('q', '').lower()
        
        if not music_recommender or music_recommender.df is None:
            return jsonify({'error': 'System not initialized'}), 500
        
        if not query:
            songs = music_recommender.df['song'].head(50).tolist()
        else:
            songs = music_recommender.df[
                music_recommender.df['song'].str.lower().str.contains(query, na=False)
            ]['song'].head(50).tolist()
        
        return jsonify({
            'success': True,
            'songs': songs
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/generate-lyrics', methods=['POST'])
def generate_lyrics():
    """Generate AI lyrics based on user input"""
    try:
        data = request.get_json()
        theme = data.get('theme', '')
        language = data.get('language', 'english')
        genre = data.get('genre', 'pop')
        mood = data.get('mood', 'happy')
        
        if not theme:
            return jsonify({'error': 'Theme is required'}), 400
        
        # Generate lyrics with language support
        lyrics = generate_lyrics_template(theme, genre, mood, language)
        
        return jsonify({
            'success': True,
            'lyrics': lyrics,
            'theme': theme,
            'genre': genre,
            'mood': mood,
            'language': language
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/generate-song', methods=['POST'])
def generate_song():
    """Generate AI song description based on user input"""
    try:
        data = request.get_json()
        prompt = data.get('prompt', '')
        duration = data.get('duration', 'medium')
        tempo = data.get('tempo', 'medium')
        vocals = data.get('vocals', 'mixed')
        
        if not prompt:
            return jsonify({'error': 'Prompt is required'}), 400
        
        # Generate song description
        song_description = generate_song_description(prompt, duration, tempo, vocals)
        
        return jsonify({
            'success': True,
            'song_description': song_description,
            'prompt': prompt
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

def generate_song_description(prompt, duration, tempo, vocals):
    """Generate detailed song description for AI music platforms"""
    
    # Map tempo to BPM range
    tempo_map = {
        'slow': '60-80 BPM',
        'medium': '90-120 BPM',
        'fast': '130-160 BPM'
    }
    
    # Map duration to structure
    duration_map = {
        'short': 'Intro ‚Üí Verse ‚Üí Chorus ‚Üí Verse ‚Üí Chorus ‚Üí Outro',
        'medium': 'Intro ‚Üí Verse 1 ‚Üí Chorus ‚Üí Verse 2 ‚Üí Chorus ‚Üí Bridge ‚Üí Final Chorus ‚Üí Outro',
        'long': 'Intro ‚Üí Verse 1 ‚Üí Pre-Chorus ‚Üí Chorus ‚Üí Verse 2 ‚Üí Pre-Chorus ‚Üí Chorus ‚Üí Bridge ‚Üí Instrumental Break ‚Üí Final Chorus ‚Üí Extended Outro'
    }
    
    # Analyze the prompt to extract key elements
    prompt_lower = prompt.lower()
    
    # Detect genre hints
    genre_hints = []
    if any(word in prompt_lower for word in ['rock', 'guitar', 'drums', 'electric']):
        genre_hints.append('Rock')
    if any(word in prompt_lower for word in ['pop', 'catchy', 'upbeat', 'radio']):
        genre_hints.append('Pop')
    if any(word in prompt_lower for word in ['electronic', 'edm', 'synth', 'beat']):
        genre_hints.append('Electronic')
    if any(word in prompt_lower for word in ['jazz', 'saxophone', 'swing']):
        genre_hints.append('Jazz')
    if any(word in prompt_lower for word in ['classical', 'orchestra', 'piano']):
        genre_hints.append('Classical')
    if any(word in prompt_lower for word in ['hip-hop', 'rap', 'trap', 'beats']):
        genre_hints.append('Hip-Hop')
    
    genre_text = ', '.join(genre_hints) if genre_hints else 'Contemporary'
    
    # Detect mood/emotion
    mood_hints = []
    if any(word in prompt_lower for word in ['happy', 'upbeat', 'cheerful', 'joyful', 'fun']):
        mood_hints.append('uplifting and energetic')
    if any(word in prompt_lower for word in ['sad', 'melancholic', 'emotional', 'heartbreak']):
        mood_hints.append('emotional and introspective')
    if any(word in prompt_lower for word in ['romantic', 'love', 'passion']):
        mood_hints.append('romantic and tender')
    if any(word in prompt_lower for word in ['aggressive', 'intense', 'powerful']):
        mood_hints.append('intense and powerful')
    if any(word in prompt_lower for word in ['calm', 'peaceful', 'relaxing', 'chill']):
        mood_hints.append('calm and soothing')
    
    mood_text = ', '.join(mood_hints) if mood_hints else 'balanced and expressive'
    
    # Detect instruments
    instruments = []
    if 'guitar' in prompt_lower:
        instruments.append('electric guitar' if 'electric' in prompt_lower else 'acoustic guitar')
    if any(word in prompt_lower for word in ['piano', 'keys', 'keyboard']):
        instruments.append('piano')
    if 'drums' in prompt_lower or 'percussion' in prompt_lower:
        instruments.append('dynamic drums and percussion')
    if any(word in prompt_lower for word in ['synth', 'electronic']):
        instruments.append('synthesizers')
    if 'bass' in prompt_lower:
        instruments.append('bass guitar')
    if 'strings' in prompt_lower or 'violin' in prompt_lower:
        instruments.append('string section')
    
    instruments_text = ', '.join(instruments) if instruments else 'varied instrumentation'
    
    # Build the description
    description = f"""üéµ AI SONG DESCRIPTION
{'=' * 60}

üìã ORIGINAL PROMPT:
{prompt}

{'=' * 60}

üéº SONG SPECIFICATIONS:

Genre: {genre_text}
Mood/Emotion: {mood_text}
Tempo: {tempo.capitalize()} ({tempo_map[tempo]})
Duration: {duration.capitalize()}
Vocals: {vocals.capitalize()}

{'=' * 60}

üéπ MUSICAL ELEMENTS:

Main Instruments: {instruments_text}
Production Style: Modern, polished production with clear mix
Vocal Style: {'Professional studio vocals with emotion and clarity' if vocals != 'instrumental' else 'No vocals - purely instrumental'}

{'=' * 60}

üé≠ SONG STRUCTURE:
{duration_map[duration]}

{'=' * 60}

‚ú® DETAILED DESCRIPTION FOR AI:

Create a {tempo.lower()}-tempo {genre_text.lower()} song with a {mood_text} vibe. 
The song should feature {instruments_text.lower()} as the primary sonic elements. 

{prompt}

The production should be modern and radio-ready, with a focus on:
- Clear and balanced mix
- Dynamic arrangement that builds throughout the song
- Professional mastering quality
- Attention to emotional delivery and atmosphere

{f"Vocal performance should be {vocals} with professional technique, clear articulation, and emotional depth appropriate to the song's theme." if vocals != 'instrumental' else "As an instrumental track, focus on melodic development and instrumental expression to convey emotion."}

Target a {duration.lower()} format suitable for streaming platforms, 
maintaining listener engagement throughout with varied sections and dynamic changes.

{'=' * 60}

üí° USE THIS DESCRIPTION:
Copy the detailed description above and paste it into AI music generation 
platforms like Suno AI, Udio, or MusicLM for best results!
"""
    
    return description

def generate_multilingual_lyrics(theme, genre, mood, language):
    """Generate lyrics in different Indian languages"""
    
    # Language-specific templates
    lyrics_templates = {
        'hindi': {
            'verse': [
                f"‡§¶‡§ø‡§≤ ‡§Æ‡•á‡§Ç ‡§π‡•à {theme} ‡§ï‡•Ä ‡§Ü‡§ó",
                f"‡§ú‡•ã ‡§ú‡§≤‡§§‡•Ä ‡§π‡•à ‡§π‡§∞ ‡§è‡§ï ‡§∞‡§æ‡§ó",
                f"{theme} ‡§ï‡•á ‡§∏‡§æ‡§• ‡§π‡•à ‡§Ø‡•á ‡§∏‡§´‡§∞",
                f"‡§π‡§∞ ‡§™‡§≤ ‡§Æ‡•á‡§Ç ‡§Æ‡§ø‡§≤‡•á ‡§®‡§Ø‡§æ ‡§Ö‡§∏‡§∞"
            ],
            'chorus': [
                f"‡§ì {theme}, ‡§§‡•Ç ‡§π‡•Ä ‡§π‡•à ‡§Æ‡•á‡§∞‡•Ä ‡§ú‡§æ‡§®",
                f"‡§§‡•á‡§∞‡•á ‡§¨‡§ø‡§®‡§æ ‡§Ö‡§ß‡•Ç‡§∞‡•Ä ‡§Ø‡•á ‡§ï‡§π‡§æ‡§®",
                f"{theme} ‡§∏‡•á ‡§π‡•à ‡§Ø‡•á ‡§™‡•ç‡§Ø‡§æ‡§∞",
                f"‡§¶‡§ø‡§≤ ‡§ï‡•Ä ‡§ß‡§°‡§º‡§ï‡§®, ‡§ú‡•Ä‡§µ‡§® ‡§ï‡§æ ‡§Ü‡§ß‡§æ‡§∞"
            ],
            'bridge': f"‡§ú‡§¨ ‡§≠‡•Ä ‡§≤‡§ó‡•á ‡§Ö‡§Ç‡§ß‡•á‡§∞‡§æ\n{theme} ‡§¨‡§®‡•á ‡§∏‡§π‡§æ‡§∞‡§æ ‡§Æ‡•á‡§∞‡§æ",
            'outro': f"{theme}... {theme}...\n‡§∏‡§¶‡§æ ‡§∞‡§π‡•á ‡§¶‡§ø‡§≤ ‡§Æ‡•á‡§Ç ‡§¨‡§∏‡§æ"
        },
        'kannada': {
            'verse': [
                f"{theme} ‡≤®‡≤®‡≥ç‡≤® ‡≤π‡≥É‡≤¶‡≤Ø‡≤¶‡≤≤‡≥ç‡≤≤‡≤ø",
                f"‡≤∏‡≤¶‡≤æ ‡≤®‡≤ø‡≤®‡≥ç‡≤® ‡≤®‡≥Ü‡≤®‡≤™‡≤ø‡≤®‡≤≤‡≥ç‡≤≤‡≤ø",
                f"{theme} ‡≤®‡≥Ä‡≤®‡≥Å ‡≤®‡≤®‡≥ç‡≤® ‡≤ú‡≥Ä‡≤µ‡≤®",
                f"‡≤™‡≥ç‡≤∞‡≤§‡≤ø ‡≤ï‡≥ç‡≤∑‡≤£ ‡≤π‡≥ä‡≤∏ ‡≤∏‡≤Ç‡≤§‡≥ã‡≤∑"
            ],
            'chorus': [
                f"‡≤ì {theme}, ‡≤®‡≥Ä‡≤®‡≥á ‡≤®‡≤®‡≥ç‡≤® ‡≤™‡≥ç‡≤∞‡≤æ‡≤£",
                f"‡≤®‡≤ø‡≤®‡≥ç‡≤® ‡≤¨‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤á‡≤≤‡≥ç‡≤≤ ‡≤®‡≤®‡≤ó‡≥Ü ‡≤∏‡≥ç‡≤•‡≤æ‡≤®",
                f"{theme} ‡≤Ø‡≥ä‡≤Ç‡≤¶‡≤ø‡≤ó‡≥Ü ‡≤™‡≥ç‡≤∞‡≥Ä‡≤§‡≤ø",
                f"‡≤π‡≥É‡≤¶‡≤Ø‡≤¶ ‡≤ó‡≥Ä‡≤§‡≥Ü, ‡≤ú‡≥Ä‡≤µ‡≤®‡≤¶ ‡≤∞‡≥Ä‡≤§‡≤ø"
            ],
            'bridge': f"‡≤ï‡≤§‡≥ç‡≤§‡≤≤‡≥Å ‡≤Ü‡≤µ‡≤∞‡≤ø‡≤∏‡≤ø‡≤¶‡≤æ‡≤ó\n{theme} ‡≤®‡≥Ä‡≤®‡≥á ‡≤®‡≤®‡≥ç‡≤® ‡≤¨‡≥Ü‡≤≥‡≤ï‡≥Å",
            'outro': f"{theme}... {theme}...\n‡≤é‡≤Ç‡≤¶‡≥Ü‡≤Ç‡≤¶‡≤ø‡≤ó‡≥Ç ‡≤®‡≤®‡≥ç‡≤®‡≥ä‡≤Ç‡≤¶‡≤ø‡≤ó‡≥Ü"
        },
        'tamil': {
            'verse': [
                f"{theme} ‡Æé‡Æ©‡Øç ‡ÆÆ‡Æ©‡Æ§‡Æø‡Æ≤‡Øç",
                f"‡Æ®‡ØÄ ‡Æé‡Æ™‡Øç‡Æ™‡Øã‡Æ§‡ØÅ‡ÆÆ‡Øç ‡Æ®‡Æø‡Æ©‡Øà‡Æµ‡Æø‡Æ≤‡Øç",
                f"{theme} ‡Æ®‡ØÄ‡ÆØ‡Øá ‡Æé‡Æ©‡Øç ‡Æµ‡Ææ‡Æ¥‡Øç‡Æï‡Øç‡Æï‡Øà",
                f"‡Æí‡Æµ‡Øç‡Æµ‡Øä‡Æ∞‡ØÅ ‡Æ®‡Øä‡Æü‡Æø‡ÆØ‡ØÅ‡ÆÆ‡Øç ‡Æ™‡ØÅ‡Æ§‡Æø‡ÆØ ‡ÆÆ‡Æï‡Æø‡Æ¥‡Øç‡Æö‡Øç‡Æö‡Æø"
            ],
            'chorus': [
                f"‡Æì {theme}, ‡Æ®‡ØÄ‡Æ§‡Ææ‡Æ©‡Øç ‡Æé‡Æ©‡Øç ‡Æâ‡ÆØ‡Æø‡Æ∞‡Øç",
                f"‡Æâ‡Æ©‡Øç‡Æ©‡Øà ‡Æµ‡Æø‡Æü‡Øç‡Æü‡Ææ‡Æ≤‡Øç ‡Æé‡Æ©‡Æï‡Øç‡Æï‡ØÅ ‡Æá‡Æü‡ÆÆ‡Æø‡Æ≤‡Øç‡Æ≤‡Øà",
                f"{theme} ‡Æâ‡Æü‡Æ©‡Øç ‡Æï‡Ææ‡Æ§‡Æ≤‡Øç",
                f"‡Æá‡Æ§‡ÆØ‡Æ§‡Øç‡Æ§‡Æø‡Æ©‡Øç ‡Æ™‡Ææ‡Æü‡Øç‡Æü‡ØÅ, ‡Æµ‡Ææ‡Æ¥‡Øç‡Æï‡Øç‡Æï‡Øà‡ÆØ‡Æø‡Æ©‡Øç ‡Æµ‡Æ¥‡Æø"
            ],
            'bridge': f"‡Æá‡Æ∞‡ØÅ‡Æ≥‡Øç ‡Æö‡ØÇ‡Æ¥‡ØÅ‡ÆÆ‡Øç ‡Æ™‡Øã‡Æ§‡ØÅ\n{theme} ‡Æ®‡ØÄ‡ÆØ‡Øá ‡Æé‡Æ©‡Øç ‡Æí‡Æ≥‡Æø",
            'outro': f"{theme}... {theme}...\n‡Æé‡Æ©‡Øç‡Æ±‡ØÜ‡Æ©‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æé‡Æ©‡Øç‡Æ©‡ØÅ‡Æü‡Æ©‡Øç"
        },
        'telugu': {
            'verse': [
                f"{theme} ‡∞®‡∞æ ‡∞π‡±É‡∞¶‡∞Ø‡∞Ç‡∞≤‡±ã",
                f"‡∞®‡±Ä‡∞µ‡±Å ‡∞é‡∞™‡±ç‡∞™‡±Å‡∞°‡±Ç ‡∞ú‡±ç‡∞û‡∞æ‡∞™‡∞ï‡∞Ç‡∞≤‡±ã",
                f"{theme} ‡∞®‡±Å‡∞µ‡±ç‡∞µ‡±á ‡∞®‡∞æ ‡∞ú‡±Ä‡∞µ‡∞ø‡∞§‡∞Ç",
                f"‡∞™‡±ç‡∞∞‡∞§‡∞ø ‡∞ï‡±ç‡∞∑‡∞£‡∞Ç ‡∞ï‡±ä‡∞§‡±ç‡∞§ ‡∞Ü‡∞®‡∞Ç‡∞¶‡∞Ç"
            ],
            'chorus': [
                f"‡∞ì {theme}, ‡∞®‡±Å‡∞µ‡±ç‡∞µ‡±á ‡∞®‡∞æ ‡∞™‡±ç‡∞∞‡∞æ‡∞£‡∞Ç",
                f"‡∞®‡∞ø‡∞®‡±ç‡∞®‡±Å ‡∞≤‡±á‡∞ï‡±Å‡∞Ç‡∞°‡∞æ ‡∞®‡∞æ‡∞ï‡±Å ‡∞∏‡±ç‡∞•‡∞æ‡∞®‡∞Ç ‡∞≤‡±á‡∞¶‡±Å",
                f"{theme} ‡∞§‡±ã ‡∞™‡±ç‡∞∞‡±á‡∞Æ",
                f"‡∞π‡±É‡∞¶‡∞Ø‡∞™‡±Å ‡∞™‡∞æ‡∞ü, ‡∞ú‡±Ä‡∞µ‡∞ø‡∞§ ‡∞Æ‡∞æ‡∞∞‡±ç‡∞ó‡∞Ç"
            ],
            'bridge': f"‡∞ö‡±Ä‡∞ï‡∞ü‡∞ø ‡∞Ü‡∞µ‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø‡∞®‡∞™‡±ç‡∞™‡±Å‡∞°‡±Å\n{theme} ‡∞®‡±Å‡∞µ‡±ç‡∞µ‡±á ‡∞®‡∞æ ‡∞µ‡±Ü‡∞≤‡±Å‡∞ó‡±Å",
            'outro': f"{theme}... {theme}...\n‡∞é‡∞™‡±ç‡∞™‡∞ü‡∞ø‡∞ï‡±Ä ‡∞®‡∞æ‡∞§‡±ã"
        },
        'malayalam': {
            'verse': [
                f"{theme} ‡¥é‡¥®‡µç‡¥±‡µÜ ‡¥π‡µÉ‡¥¶‡¥Ø‡¥§‡µç‡¥§‡¥ø‡µΩ",
                f"‡¥®‡µÄ ‡¥é‡¥™‡µç‡¥™‡µã‡¥¥‡µÅ‡¥Ç ‡¥ì‡µº‡¥Æ‡µç‡¥Æ‡¥Ø‡¥ø‡µΩ",
                f"{theme} ‡¥®‡µÄ‡¥Ø‡¥æ‡¥£‡µç ‡¥é‡¥®‡µç‡¥±‡µÜ ‡¥ú‡µÄ‡¥µ‡¥ø‡¥§‡¥Ç",
                f"‡¥ì‡¥∞‡µã ‡¥®‡¥ø‡¥Æ‡¥ø‡¥∑‡¥µ‡µÅ‡¥Ç ‡¥™‡µÅ‡¥§‡¥ø‡¥Ø ‡¥∏‡¥®‡µç‡¥§‡µã‡¥∑‡¥Ç"
            ],
            'chorus': [
                f"‡¥ì {theme}, ‡¥®‡µÄ‡¥Ø‡¥æ‡¥£‡µç ‡¥é‡¥®‡µç‡¥±‡µÜ ‡¥™‡µç‡¥∞‡¥æ‡¥£‡µª",
                f"‡¥®‡¥ø‡¥®‡µç‡¥®‡µÜ ‡¥ï‡µÇ‡¥ü‡¥æ‡¥§‡µÜ ‡¥é‡¥®‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥∏‡µç‡¥•‡¥≤‡¥Æ‡¥ø‡¥≤‡µç‡¥≤",
                f"{theme} ‡¥Ø‡µã‡¥ü‡µä‡¥™‡µç‡¥™‡¥Ç ‡¥∏‡µç‡¥®‡µá‡¥π‡¥Ç",
                f"‡¥π‡µÉ‡¥¶‡¥Ø‡¥§‡µç‡¥§‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥™‡¥æ‡¥ü‡µç‡¥ü‡µç, ‡¥ú‡µÄ‡¥µ‡¥ø‡¥§‡¥§‡µç‡¥§‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥µ‡¥¥‡¥ø"
            ],
            'bridge': f"‡¥á‡¥∞‡µÅ‡¥ü‡µç‡¥ü‡µç ‡¥µ‡¥∞‡µÅ‡¥Æ‡µç‡¥™‡µã‡µæ\n{theme} ‡¥®‡µÄ‡¥Ø‡¥æ‡¥£‡µç ‡¥é‡¥®‡µç‡¥±‡µÜ ‡¥µ‡µÜ‡¥≥‡¥ø‡¥ö‡µç‡¥ö‡¥Ç",
            'outro': f"{theme}... {theme}...\n‡¥é‡¥®‡µç‡¥®‡µÜ‡¥®‡µç‡¥®‡µá‡¥ï‡µç‡¥ï‡µÅ‡¥Ç ‡¥é‡¥®‡µç‡¥®‡µã‡¥ü‡µä‡¥™‡µç‡¥™‡¥Ç"
        },
        'marathi': {
            'verse': [
                f"{theme} ‡§Æ‡§æ‡§ù‡•ç‡§Ø‡§æ ‡§π‡•É‡§¶‡§Ø‡§æ‡§§",
                f"‡§§‡•Ç ‡§®‡•á‡§π‡§Æ‡•Ä ‡§Ü‡§†‡§µ‡§£‡•Ä‡§§",
                f"{theme} ‡§§‡•Ç‡§ö ‡§Æ‡§æ‡§ù‡•á ‡§ú‡•Ä‡§µ‡§®",
                f"‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§ï‡•ç‡§∑‡§£ ‡§®‡§µ‡§æ ‡§Ü‡§®‡§Ç‡§¶"
            ],
            'chorus': [
                f"‡§ì {theme}, ‡§§‡•Ç‡§ö ‡§Æ‡§æ‡§ù‡§æ ‡§™‡•ç‡§∞‡§æ‡§£",
                f"‡§§‡•Å‡§ù‡•ç‡§Ø‡§æ‡§∂‡§ø‡§µ‡§æ‡§Ø ‡§Æ‡§≤‡§æ ‡§∏‡•ç‡§•‡§æ‡§® ‡§®‡§æ‡§π‡•Ä",
                f"{theme} ‡§∏‡•ã‡§¨‡§§ ‡§™‡•ç‡§∞‡•á‡§Æ",
                f"‡§π‡•É‡§¶‡§Ø‡§æ‡§ö‡•á ‡§ó‡•Ä‡§§, ‡§ú‡•Ä‡§µ‡§®‡§æ‡§ö‡§æ ‡§Æ‡§æ‡§∞‡•ç‡§ó"
            ],
            'bridge': f"‡§ú‡•á‡§µ‡•ç‡§π‡§æ ‡§Ö‡§Ç‡§ß‡§æ‡§∞ ‡§Ø‡•á‡§§‡•ã\n{theme} ‡§§‡•Ç‡§ö ‡§Æ‡§æ‡§ù‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∂",
            'outro': f"{theme}... {theme}...\n‡§∏‡§¶‡•à‡§µ ‡§Æ‡§æ‡§ù‡•ç‡§Ø‡§æ‡§∏‡•ã‡§¨‡§§"
        },
        'bengali': {
            'verse': [
                f"{theme} ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶π‡ßÉ‡¶¶‡¶Ø‡¶º‡ßá",
                f"‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶∏‡¶∞‡ßç‡¶¨‡¶¶‡¶æ ‡¶∏‡ßç‡¶Æ‡ßÉ‡¶§‡¶ø‡¶§‡ßá",
                f"{theme} ‡¶§‡ßÅ‡¶Æ‡¶ø‡¶á ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ú‡ßÄ‡¶¨‡¶®",
                f"‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶Æ‡ßÅ‡¶π‡ßÇ‡¶∞‡ßç‡¶§‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶Ü‡¶®‡¶®‡ßç‡¶¶"
            ],
            'chorus': [
                f"‡¶ì {theme}, ‡¶§‡ßÅ‡¶Æ‡¶ø‡¶á ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶æ‡¶£",
                f"‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶õ‡¶æ‡¶°‡¶º‡¶æ ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶®‡ßá‡¶á",
                f"{theme} ‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶≠‡¶æ‡¶≤‡ßã‡¶¨‡¶æ‡¶∏‡¶æ",
                f"‡¶π‡ßÉ‡¶¶‡¶Ø‡¶º‡ßá‡¶∞ ‡¶ó‡¶æ‡¶®, ‡¶ú‡ßÄ‡¶¨‡¶®‡ßá‡¶∞ ‡¶™‡¶•"
            ],
            'bridge': f"‡¶Ø‡¶ñ‡¶® ‡¶Ö‡¶®‡ßç‡¶ß‡¶ï‡¶æ‡¶∞ ‡¶Ü‡¶∏‡ßá\n{theme} ‡¶§‡ßÅ‡¶Æ‡¶ø‡¶á ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶Ü‡¶≤‡ßã",
            'outro': f"{theme}... {theme}...\n‡¶ö‡¶ø‡¶∞‡¶ï‡¶æ‡¶≤ ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá"
        },
        'punjabi': {
            'verse': [
                f"{theme} ‡®Æ‡©á‡®∞‡©á ‡®¶‡®ø‡®≤ ‡®µ‡®ø‡©±‡®ö",
                f"‡®§‡©Ç‡©∞ ‡®π‡®Æ‡©á‡®∏‡®º‡®æ ‡®Ø‡®æ‡®¶‡®æ‡®Ç ‡®µ‡®ø‡©±‡®ö",
                f"{theme} ‡®§‡©Ç‡©∞ ‡®π‡©Ä ‡®Æ‡©á‡®∞‡©Ä ‡®ú‡®º‡®ø‡©∞‡®¶‡®ó‡©Ä",
                f"‡®π‡®∞ ‡®™‡®≤ ‡®®‡®µ‡©Ä‡®Ç ‡®ñ‡©Å‡®∏‡®º‡©Ä"
            ],
            'chorus': [
                f"‡®ì {theme}, ‡®§‡©Ç‡©∞ ‡®π‡©Ä ‡®Æ‡©á‡®∞‡©Ä ‡®ú‡®æ‡®®",
                f"‡®§‡©á‡®∞‡©á ‡®¨‡®ø‡®®‡®æ ‡®®‡®π‡©Ä‡®Ç ‡®ï‡©ã‡®à ‡®•‡®æ‡®Ç",
                f"{theme} ‡®®‡®æ‡®≤ ‡®™‡®ø‡®Ü‡®∞",
                f"‡®¶‡®ø‡®≤ ‡®¶‡®æ ‡®ó‡©Ä‡®§, ‡®ú‡©Ä‡®µ‡®® ‡®¶‡®æ ‡®∞‡®æ‡®π"
            ],
            'bridge': f"‡®ú‡®¶‡©ã‡®Ç ‡®π‡®®‡©á‡®∞‡®æ ‡®Ü‡®µ‡©á\n{theme} ‡®§‡©Ç‡©∞ ‡®π‡©Ä ‡®Æ‡©á‡®∞‡©Ä ‡®∞‡©ã‡®∏‡®º‡®®‡©Ä",
            'outro': f"{theme}... {theme}...\n‡®π‡®Æ‡©á‡®∏‡®º‡®æ ‡®Æ‡©á‡®∞‡©á ‡®®‡®æ‡®≤"
        },
        'gujarati': {
            'verse': [
                f"{theme} ‡™Æ‡™æ‡™∞‡™æ ‡™π‡´É‡™¶‡™Ø‡™Æ‡™æ‡™Ç",
                f"‡™§‡´Å‡™Ç ‡™π‡™Ç‡™Æ‡´á‡™∂‡™æ ‡™Ø‡™æ‡™¶‡™Æ‡™æ‡™Ç",
                f"{theme} ‡™§‡´Å‡™Ç ‡™ú ‡™Æ‡™æ‡™∞‡´Å‡™Ç ‡™ú‡´Ä‡™µ‡™®",
                f"‡™¶‡™∞‡´á‡™ï ‡™ï‡´ç‡™∑‡™£‡´á ‡™®‡™µ‡´ã ‡™Ü‡™®‡™Ç‡™¶"
            ],
            'chorus': [
                f"‡™ì {theme}, ‡™§‡´Å‡™Ç ‡™ú ‡™Æ‡™æ‡™∞‡´ã ‡™™‡´ç‡™∞‡™æ‡™£",
                f"‡™§‡™æ‡™∞‡™æ ‡™µ‡™ø‡™®‡™æ ‡™Æ‡™®‡´á ‡™∏‡´ç‡™•‡™æ‡™® ‡™®‡™•‡´Ä",
                f"{theme} ‡™∏‡™æ‡™•‡´á ‡™™‡´ç‡™∞‡´á‡™Æ",
                f"‡™π‡´É‡™¶‡™Ø‡™®‡´Å‡™Ç ‡™ó‡´Ä‡™§, ‡™ú‡´Ä‡™µ‡™®‡™®‡´ã ‡™Æ‡™æ‡™∞‡´ç‡™ó"
            ],
            'bridge': f"‡™ú‡´ç‡™Ø‡™æ‡™∞‡´á ‡™Ö‡™Ç‡™ß‡™ï‡™æ‡™∞ ‡™Ü‡™µ‡´á\n{theme} ‡™§‡´Å‡™Ç ‡™ú ‡™Æ‡™æ‡™∞‡´ã ‡™™‡´ç‡™∞‡™ï‡™æ‡™∂",
            'outro': f"{theme}... {theme}...\n‡™∏‡™¶‡™æ ‡™Æ‡™æ‡™∞‡´Ä ‡™∏‡™æ‡™•‡´á"
        }
    }
    
    template = lyrics_templates.get(language, lyrics_templates['hindi'])
    
    # Build lyrics structure
    lyrics = f"""[Verse 1]
{template['verse'][0]}
{template['verse'][1]}
{template['verse'][2]}
{template['verse'][3]}

[Chorus]
{template['chorus'][0]}
{template['chorus'][1]}
{template['chorus'][2]}
{template['chorus'][3]}

[Verse 2]
{template['verse'][0]}
{template['verse'][2]}
{template['verse'][1]}
{template['verse'][3]}

[Chorus]
{template['chorus'][0]}
{template['chorus'][1]}
{template['chorus'][2]}
{template['chorus'][3]}

[Bridge]
{template['bridge']}

[Final Chorus]
{template['chorus'][0]}
{template['chorus'][1]}
{template['chorus'][2]}
{template['chorus'][3]}

[Outro]
{template['outro']}
"""
    
    return lyrics

def generate_lyrics_template(theme, genre, mood, language='english'):
    """Generate lyrics using templates based on genre, mood, and language"""
    
    # If language is not English, generate transliterated/regional lyrics
    if language != 'english':
        return generate_multilingual_lyrics(theme, genre, mood, language)
    
    # Theme-based verse templates
    verse_templates = {
        'happy': [
            f"When I think about {theme}, my heart starts to glow",
            f"Every moment with {theme}, letting feelings flow",
            f"Dancing through the day, {theme} lights my way",
            f"Nothing can compare to this joy I display"
        ],
        'sad': [
            f"Memories of {theme} fade like morning dew",
            f"Lost in thoughts of {theme}, feeling so blue",
            f"Searching for the light, through the darkest night",
            f"Hoping {theme} will make things right"
        ],
        'energetic': [
            f"Let's go, {theme} is calling out my name",
            f"Feel the beat, {theme} sets my soul aflame",
            f"No stopping now, we're breaking all the chains",
            f"Living for {theme}, running through the veins"
        ],
        'calm': [
            f"Peaceful moments with {theme} by my side",
            f"Gentle whispers where {theme} resides",
            f"In the stillness, {theme} helps me find",
            f"A quiet place within my mind"
        ]
    }
    
    chorus_templates = {
        'pop': [
            f"Oh {theme}, you're everything I need",
            f"{theme}, you're the one who sets me free",
            f"Together we can fly so high",
            f"With {theme}, reaching for the sky"
        ],
        'rock': [
            f"{theme}! Breaking through the night!",
            f"{theme}! We're ready for the fight!",
            f"Nothing's gonna hold us back!",
            f"With {theme}, we're on the attack!"
        ],
        'jazz': [
            f"{theme} in the moonlight, soft and slow",
            f"Swaying to the rhythm, letting feelings show",
            f"In this jazzy paradise we've found",
            f"With {theme}, love knows no bound"
        ],
        'hip-hop': [
            f"Yeah, {theme} on my mind all day",
            f"Living life my own unique way",
            f"{theme} got me feeling so fly",
            f"Reaching for the stars up in the sky"
        ]
    }
    
    # Select templates based on mood and genre
    verses = verse_templates.get(mood, verse_templates['happy'])
    chorus = chorus_templates.get(genre, chorus_templates['pop'])
    
    # Build the complete lyrics
    lyrics = f"""[Verse 1]
{verses[0]}
{verses[1]}
{verses[2]}
{verses[3]}

[Chorus]
{chorus[0]}
{chorus[1]}
{chorus[2]}
{chorus[3]}

[Verse 2]
The rhythm of {theme} pulses through my soul
With every beat, {theme} makes me whole
Can you feel the magic in the air?
{theme}'s presence everywhere

[Chorus]
{chorus[0]}
{chorus[1]}
{chorus[2]}
{chorus[3]}

[Bridge]
When the world feels cold and gray
{theme} shows me the way
Through the highs and through the lows
{theme}'s the melody that flows

[Final Chorus]
{chorus[0]}
{chorus[1]}
{chorus[2]}
{chorus[3]}

[Outro]
{theme}... {theme}...
Forever in my heart, {theme}
"""
    
    return lyrics

@app.errorhandler(404)
def not_found(e):
    return render_template('404.html'), 404

@app.errorhandler(500)
def server_error(e):
    return render_template('500.html'), 500

if __name__ == '__main__':
    print("=" * 60)
    print("üéµ AI Music Recommendation System with Weather Integration")
    print("=" * 60)
    
    # Load data
    if load_data():
        print("\nüöÄ Starting server...")
        print("üìç Open http://127.0.0.1:5000 in your browser")
        print("=" * 60)
        app.run(debug=True, host='0.0.0.0', port=5000)
    else:
        print("\n‚ùå Failed to start: Dataset not found")
        print("Please add 'data/music_data.csv' and restart")
        print("=" * 60)
